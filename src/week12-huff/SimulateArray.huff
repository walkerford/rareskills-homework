
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 * In this puzzle, the task is to simulate an array in Huff using the "exact" storage pattern as solidity. Expected functions can; 
 *      - Push numbers onto a array, 
 *      - Pop the last index from the array,
 *      - View what's stored at an index, 
 *      - Gets the length of the array, 
 *      - Write to an index if it is valid.
 *
 *      - Writes and reads outside of length revert. 
 *      - Popping off a zero length array reverts.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function pushh(uint256 num) payable returns()
 #define function popp() payable returns()
 #define function read(uint256 index) payable returns(uint256)
 #define function length() payable returns(uint256)
 #define function write(uint256 index, uint256 num) payable returns()

 #define error OutOfBounds()
 #define error ZeroArray()

#define constant LENGTH = FREE_STORAGE_POINTER()
#define constant BASE_POINTER = FREE_STORAGE_POINTER()
#define constant NEXT_POINTER = FREE_STORAGE_POINTER()

#define macro CONSTRUCTOR() = takes(0) returns(0) {
    // Compute base-pointer (points to start of the array)
    // and next-pointer (points to next open slot in array). 
    // They start out the same, but next-pointer will be 
    // incremented each time a new item is added and
    // decremented each time an item is removed.

    origin

    // Store base-pointer slot into memory
    [BASE_POINTER]              // [slot]
    0x00                        // [offset slot]
    mstore                      // []

    // Compute data storage slot
    0x20 0x00                   // [offset size]
    sha3                        // [base-pointer]

    dup1                        // [base-pointer]

    // Store base-pointer
    [BASE_POINTER]              // [offset base-pointer base-pointer]
    sstore                      // [base-pointer]

    // Store next-pointer
    [NEXT_POINTER]
    sstore
}

 #define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(length) eq get_length jumpi
    dup1 __FUNC_SIG(pushh) eq push_item jumpi
    dup1 __FUNC_SIG(popp) eq pop_item jumpi
    dup1 __FUNC_SIG(read) eq read_item jumpi
    dup1 __FUNC_SIG(write) eq write_item jumpi
    0x00 0x00 revert

    get_length:
        [LENGTH] sload              // [length]
        0x00 mstore                 // []
        0x20 0x00 return

    read_item:
        LOAD_INDEX_AS_OFFSET()      // [offset]

        // Load base-pointer
        [BASE_POINTER] sload        // [base-pointer offset]

        // Add offset to base-pointer
        add                         // [data-pointer]

        // Load data
        sload                       // [data]

        // Store data
        0x00 mstore                 // []

        0x20 0x00 return

    push_item:
        // There is no size limit for this array, because the address space is large.

        // Get next-pointer from storage
        [NEXT_POINTER] sload        // [next-pointer]
        
        // Get num
        0x04 calldataload           // [num next-pointer]     

        dup2                        // [next-pointer num next-pointer]

        // Store new value
        sstore                      // [next-pointer]

        // Increment next-pointer
        0x20                        // [offset next-pointer]
        add                         // [next-pointer]

        // Store updated next-pointer
        [NEXT_POINTER]              // [offset next-pointer]
        sstore                      // []

        // Increment length
        [LENGTH] sload              // [length]
        0x01 add                    // [length]

        // Store  updated length
        [LENGTH] sstore             // []

        0x00 0x00 return

    pop_item:
        // Load length
        [LENGTH] sload              // [length]
        dup1                        // [length]
        
        // Validate length
        iszero                      // [iszero(length) length]
        revert_zero_array jumpi     // [length]
    
        // Decrement length
        0x01 swap1 sub              // [length - 1]
        [LENGTH] sstore             // []
        
        // Decrement next-pointer
        [NEXT_POINTER] sload        // [next-pointer]
        0x20 sub                    // [next-pointer - 0x20]
        [NEXT_POINTER] sstore       // []

        0x00 0x00 return

    write_item:
        // Load num
        0x24 calldataload           // [num]
        
        // Save num in correct slot
        LOAD_INDEX_AS_OFFSET()      // [offset, num]
        [BASE_POINTER] sload        // [base-pointer, offset, num]
        add                         // [data-pointer, num]
        sstore                      // []

        0x00 0x00 return

    revert_out_of_bounds:
        __ERROR(OutOfBounds) 0x00 mstore
        0x04 0x00 revert
    
    revert_zero_array:
        __ERROR(ZeroArray) 0x00 mstore
        0x04 0x00 revert
 }

#define macro LOAD_INDEX_AS_OFFSET() = takes(0) returns(1) {
        // Loads index from calldata and converts to a address offset

        // Load index
        0x04 calldataload           // [index]

        // Load length
        [LENGTH] sload              // [length index]

        // Validate index is in bounds
        dup2                        // [index length index]
        lt                          // [bool index]
        iszero
        revert_out_of_bounds jumpi  // [index]

        // Convert index to address offset
        0x20
        mul                         // [offset]
}