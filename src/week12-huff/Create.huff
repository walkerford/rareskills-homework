 
/** 
 *  CREATE HUFF EXERCISE
 *  
 *  The task is to deploy this contract with a function `makeContract()` which when called creates a contract
 *  that when called with any data returns `0xcaffe`.
 *  The call to `makeContract` should return the address of the newly created contract.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function makeContract() payable returns(address)

// Code length: 19 bytes == 0x13
#define constant CODE_LENGTH = 0x13

// Shift offset: 0x68 == 104 bits ((32 bytes - 19 bytes) * 8 bits/byte)
#define constant CODE_SHIFT = 0x68

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    __FUNC_SIG(makeContract) eq mainJump jumpi

    // Revert
    0x00 0x00 revert

mainJump:
    // Code from CreateConstructor.huff
    0x600a8060093d393df3620caffe5f5260205ff3 // [code]
    
    // Right-pad the code
    [CODE_SHIFT] shl            // [code]
    0x00 mstore                 // []
    [CODE_LENGTH]               // [size]
    0x00                        // [offset size]
    0x00                        // [wei offset size]
    create                      // [address]
    0x00 mstore                 // []
    0x20 0x00 return

    // My original, hand-crafted code, which I later replaced with the Huff
    // generated equivalent.
    // The Huff generated equivalent uses `returncodesize` instead of `push0`

    // 0x600a8060093d393df3620caffe5f5260205ff3

    // Init + runtime = 20 bytes = 0x14

    // 0x600A80600A5F395FF3FE (10 bytes)
    // Init code
    // push1 (60)
    // 0x0a         // Length of runtime code (for return)
    // dup1 (80)    // Length of runtime code (for codecopy)
    // push1 (60)
    // 0x0a         // Where the runtime code begins, init code is 10 bytes
    // push0 (5F)   // Destination memory slot
    // codecopy (39)
    // push0 (5F)   // Source memory slot
    // return (F3)
    // invalid (FE)

    // 0x620CAFFE5F5260205FF3 (10 bytes)
    // Runtime code
    // push3 (62) 
    // 0x0C 0xAF 0xFE   // Program return data
    // push0 (5F)       // Destination memory slot
    // mstore (52)
    // push1 (60)
    // 0x20             // Return data length
    // push0 (5F)       // Source memory slot
    // return (F3)
 }